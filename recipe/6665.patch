From 64d6fa3dd65bda71caf2cf5b9a1472285d3756f2 Mon Sep 17 00:00:00 2001
From: Luis Alonso Murillo Rojas <luis.murillo.rojas@intel.com>
Date: Sat, 24 Feb 2024 00:51:40 +0000
Subject: [PATCH 1/6] Change embree tarball version to 4.0.0

---
 3rdparty/embree/embree.cmake | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)


diff --git a/cpp/open3d/t/geometry/RaycastingScene.cpp b/cpp/open3d/t/geometry/RaycastingScene.cpp
index d77595344..ebc2f2eb7 100644
--- a/cpp/open3d/t/geometry/RaycastingScene.cpp
+++ b/cpp/open3d/t/geometry/RaycastingScene.cpp
@@ -12,7 +12,7 @@
 #include "open3d/t/geometry/RaycastingScene.h"
 
 // This header is in the embree src dir (embree/src/ext_embree/..).
-#include <embree3/rtcore.h>
+#include <embree4/rtcore.h>
 #include <tbb/parallel_for.h>
 
 #include <Eigen/Core>
@@ -33,7 +33,7 @@ typedef Eigen::Vector3f Vec3f;
 
 // Error function called by embree.
 void ErrorFunction(void* userPtr, enum RTCError error, const char* str) {
-    open3d::utility::LogError("embree error: {} {}", error, str);
+    open3d::utility::LogError("embree error: {} {}", rtcGetErrorString(error), str);
 }
 
 // Checks the last dim, ensures that the number of dims is >= min_ndim, checks
@@ -61,7 +61,7 @@ void AssertTensorDtypeLastDimDeviceMinNDim(const open3d::core::Tensor& tensor,
 }
 
 struct CountIntersectionsContext {
-    RTCIntersectContext context;
+    RTCRayQueryContext context;
     std::vector<std::tuple<uint32_t, uint32_t, float>>*
             previous_geom_prim_ID_tfar;
     int* intersections;
@@ -111,7 +111,7 @@ void CountIntersectionsFunc(const RTCFilterFunctionNArguments* args) {
 }
 
 struct ListIntersectionsContext {
-    RTCIntersectContext context;
+    RTCRayQueryContext context;
     std::vector<std::tuple<uint32_t, uint32_t, float>>*
             previous_geom_prim_ID_tfar;
     unsigned int* ray_ids;
@@ -360,9 +360,6 @@ struct RaycastingScene::Impl {
                   const int nthreads) {
         CommitScene();
 
-        struct RTCIntersectContext context;
-        rtcInitIntersectContext(&context);
-
         auto LoopFn = [&](const tbb::blocked_range<size_t>& range) {
             std::vector<RTCRayHit> rayhits(range.size());
 
@@ -387,16 +384,14 @@ struct RaycastingScene::Impl {
                 } else {
                     rh.ray.tfar = std::numeric_limits<float>::infinity();
                 }
-                rh.ray.mask = 0;
+                rh.ray.mask = -1;
                 rh.ray.id = i - range.begin();
                 rh.ray.flags = 0;
                 rh.hit.geomID = RTC_INVALID_GEOMETRY_ID;
                 rh.hit.instID[0] = RTC_INVALID_GEOMETRY_ID;
+                rtcIntersect1(scene_, &rh);
             }
 
-            rtcIntersect1M(scene_, &context, &rayhits[0], range.size(),
-                           sizeof(RTCRayHit));
-
             for (size_t i = range.begin(); i < range.end(); ++i) {
                 RTCRayHit rh = rayhits[i - range.begin()];
                 size_t idx = rh.ray.id + range.begin();
@@ -446,8 +441,12 @@ struct RaycastingScene::Impl {
                         const int nthreads) {
         CommitScene();
 
-        struct RTCIntersectContext context;
-        rtcInitIntersectContext(&context);
+        struct RTCRayQueryContext context;
+        rtcInitRayQueryContext(&context);
+
+        RTCOccludedArguments args;
+        rtcInitOccludedArguments(&args);
+        args.context = &context;
 
         auto LoopFn = [&](const tbb::blocked_range<size_t>& range) {
             std::vector<RTCRay> rayvec(range.size());
@@ -462,13 +461,12 @@ struct RaycastingScene::Impl {
                 ray.dir_z = r[5];
                 ray.tnear = tnear;
                 ray.tfar = tfar;
-                ray.mask = 0;
+                ray.mask = -1;
                 ray.id = i - range.begin();
                 ray.flags = 0;
-            }
 
-            rtcOccluded1M(scene_, &context, &rayvec[0], range.size(),
-                          sizeof(RTCRay));
+                rtcOccluded1(scene_, &ray, &args);
+            }
 
             for (size_t i = range.begin(); i < range.end(); ++i) {
                 RTCRay ray = rayvec[i - range.begin()];
@@ -508,11 +506,15 @@ struct RaycastingScene::Impl {
                                         0.f));
 
         CountIntersectionsContext context;
-        rtcInitIntersectContext(&context.context);
-        context.context.filter = CountIntersectionsFunc;
+        rtcInitRayQueryContext(&context.context);
         context.previous_geom_prim_ID_tfar = &previous_geom_prim_ID_tfar;
         context.intersections = intersections;
 
+        RTCIntersectArguments args;
+        rtcInitIntersectArguments(&args);
+        args.filter = CountIntersectionsFunc;
+        args.context = &context.context;
+
         auto LoopFn = [&](const tbb::blocked_range<size_t>& range) {
             std::vector<RTCRayHit> rayhits(range.size());
 
@@ -527,14 +529,13 @@ struct RaycastingScene::Impl {
                 rh->ray.dir_z = r[5];
                 rh->ray.tnear = 0;
                 rh->ray.tfar = std::numeric_limits<float>::infinity();
-                rh->ray.mask = 0;
+                rh->ray.mask = -1;
                 rh->ray.flags = 0;
                 rh->ray.id = i;
                 rh->hit.geomID = RTC_INVALID_GEOMETRY_ID;
                 rh->hit.instID[0] = RTC_INVALID_GEOMETRY_ID;
+                rtcIntersect1(scene_, rh, &args);
             }
-            rtcIntersect1M(scene_, &context.context, &rayhits[0], range.size(),
-                           sizeof(RTCRayHit));
         };
 
         if (nthreads > 0) {
@@ -579,8 +580,7 @@ struct RaycastingScene::Impl {
                                         0.f));
 
         ListIntersectionsContext context;
-        rtcInitIntersectContext(&context.context);
-        context.context.filter = ListIntersectionsFunc;
+        rtcInitRayQueryContext(&context.context);
         context.previous_geom_prim_ID_tfar = &previous_geom_prim_ID_tfar;
         context.ray_ids = ray_ids;
         context.geometry_ids = geometry_ids;
@@ -590,6 +590,11 @@ struct RaycastingScene::Impl {
         context.cumsum = cumsum;
         context.track_intersections = track_intersections;
 
+        RTCIntersectArguments args;
+        rtcInitIntersectArguments(&args);
+        args.filter = ListIntersectionsFunc;
+        args.context = &context.context;
+
         auto LoopFn = [&](const tbb::blocked_range<size_t>& range) {
             std::vector<RTCRayHit> rayhits(range.size());
 
@@ -604,14 +609,13 @@ struct RaycastingScene::Impl {
                 rh->ray.dir_z = r[5];
                 rh->ray.tnear = 0;
                 rh->ray.tfar = std::numeric_limits<float>::infinity();
-                rh->ray.mask = 0;
+                rh->ray.mask = -1;
                 rh->ray.flags = 0;
                 rh->ray.id = i;
                 rh->hit.geomID = RTC_INVALID_GEOMETRY_ID;
                 rh->hit.instID[0] = RTC_INVALID_GEOMETRY_ID;
+                rtcIntersect1(scene_, rh, &args);
             }
-            rtcIntersect1M(scene_, &context.context, &rayhits[0], range.size(),
-                           sizeof(RTCRayHit));
         };
 
         if (nthreads > 0) {
@@ -695,9 +699,9 @@ RaycastingScene::RaycastingScene(int64_t nthreads)
 
     impl_->scene_ = rtcNewScene(impl_->device_);
     // set flag for better accuracy
-    rtcSetSceneFlags(
-            impl_->scene_,
-            RTC_SCENE_FLAG_ROBUST | RTC_SCENE_FLAG_CONTEXT_FILTER_FUNCTION);
+    rtcSetSceneFlags(impl_->scene_,
+                     RTC_SCENE_FLAG_ROBUST |
+                             RTC_SCENE_FLAG_FILTER_FUNCTION_IN_ARGUMENTS);
 
     impl_->devprop_join_commit = rtcGetDeviceProperty(
             impl_->device_, RTC_DEVICE_PROPERTY_JOIN_COMMIT_SUPPORTED);
@@ -746,6 +750,7 @@ uint32_t RaycastingScene::AddTriangles(const core::Tensor& vertex_positions,
         memcpy(index_buffer, data.GetDataPtr(),
                sizeof(uint32_t) * 3 * num_triangles);
     }
+    rtcSetGeometryEnableFilterFunctionFromArguments(geom, true);
     rtcCommitGeometry(geom);
 
     uint32_t geom_id = rtcAttachGeometry(impl_->scene_, geom);
@@ -1169,34 +1174,10 @@ uint32_t RaycastingScene::INVALID_ID() { return RTC_INVALID_GEOMETRY_ID; }
 
 namespace fmt {
 template <>
-struct formatter<RTCError> {
+struct formatter<RTCError> {
     template <typename FormatContext>
     auto format(const RTCError& c, FormatContext& ctx) const {
-        const char* name = nullptr;
-        switch (c) {
-            case RTC_ERROR_NONE:
-                name = "RTC_ERROR_NONE";
-                break;
-            case RTC_ERROR_UNKNOWN:
-                name = "RTC_ERROR_UNKNOWN";
-                break;
-            case RTC_ERROR_INVALID_ARGUMENT:
-                name = "RTC_ERROR_INVALID_ARGUMENT";
-                break;
-            case RTC_ERROR_INVALID_OPERATION:
-                name = "RTC_ERROR_INVALID_OPERATION";
-                break;
-            case RTC_ERROR_OUT_OF_MEMORY:
-                name = "RTC_ERROR_OUT_OF_MEMORY";
-                break;
-            case RTC_ERROR_UNSUPPORTED_CPU:
-                name = "RTC_ERROR_UNSUPPORTED_CPU";
-                break;
-            case RTC_ERROR_CANCELLED:
-                name = "RTC_ERROR_CANCELLED";
-                break;
-        }
-        // return formatter<string_view>::format(name, ctx);
+        const char* name = rtcGetErrorString(c);
         return format_to(ctx.out(), name);
     }
 
